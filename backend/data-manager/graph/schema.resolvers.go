package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"data-manager/database"
	"data-manager/graph/model"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.UserCreateInput) (*model.UserCreateResponse, error) {
	return connection.CreateUser(input), nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id string, input model.UserUpdateInput) (*model.UserUpdateResponse, error) {
	return connection.UpdateUser(id, input), nil
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id string) (*model.UserDeleteResponse, error) {
	return connection.DeleteUser(id), nil
}

// CreateProblemCategory is the resolver for the createProblemCategory field.
func (r *mutationResolver) CreateProblemCategory(ctx context.Context, input model.ProblemCategoryCreateInput) (*model.ProblemCategory, error) {
	//panic(fmt.Errorf("not implemented: CreateProblemCategory - createProblemCategory"))
	return connection.CreateProblemCategory(input), nil
}

// UpdateProblemCategory is the resolver for the updateProblemCategory field.
func (r *mutationResolver) UpdateProblemCategory(ctx context.Context, id string, input model.ProblemCategoryUpdateInput) (*model.ProblemCategoryUpdateResponse, error) {
	return connection.UpdateProblemCategory(id, input), nil
}

// DeleteProblemCategory is the resolver for the deleteProblemCategory field.
func (r *mutationResolver) DeleteProblemCategory(ctx context.Context, id string) (*model.ProblemCategoryDeleteResponse, error) {
	return connection.DeleteProblemCategory(id), nil
}

// CreateProblem is the resolver for the createProblem field.
func (r *mutationResolver) CreateProblem(ctx context.Context, input model.ProblemCreateInput) (*model.Problem, error) {
	return connection.CreateProblem(input), nil
}

// UpdateProblem is the resolver for the updateProblem field.
func (r *mutationResolver) UpdateProblem(ctx context.Context, id string, input model.ProblemUpdateInput) (*model.ProblemUpdateResponse, error) {
	return connection.UpdateProblem(id, input), nil
}

// DeleteProblem is the resolver for the deleteProblem field.
func (r *mutationResolver) DeleteProblem(ctx context.Context, id string) (*model.ProblemDeleteResponse, error) {
	return connection.DeleteProblem(id), nil
}

// CreateTag is the resolver for the createTag field.
func (r *mutationResolver) CreateTag(ctx context.Context, input model.TagCreateInput) (*model.TagCreateResponse, error) {
	return connection.CreateTag(input), nil
}

// UpdateTag is the resolver for the updateTag field.
func (r *mutationResolver) UpdateTag(ctx context.Context, id string, input model.TagUpdateInput) (*model.TagUpdateResponse, error) {
	return connection.UpdateTag(id, input), nil
}

// DeleteTag is the resolver for the deleteTag field.
func (r *mutationResolver) DeleteTag(ctx context.Context, id string) (*model.TagDeleteResponse, error) {
	return connection.DeleteTag(id), nil
}

// GetUser is the resolver for the getUser field.
func (r *queryResolver) GetUser(ctx context.Context, id string) (*model.User, error) {
	return connection.GetUser(id), nil
}

// GetUsers is the resolver for the getUsers field.
func (r *queryResolver) GetUsers(ctx context.Context) ([]*model.User, error) {
	return connection.GetUsers(), nil
}

// GetProblemCategory is the resolver for the getProblemCategory field.
func (r *queryResolver) GetProblemCategory(ctx context.Context, id string) (*model.ProblemCategory, error) {
	return connection.GetProblemCategory(id), nil
}

// GetProblemCategories is the resolver for the getProblemCategories field.
func (r *queryResolver) GetProblemCategories(ctx context.Context) ([]*model.ProblemCategory, error) {
	return connection.GetProblemCategories(), nil
}

// GetProblem is the resolver for the getProblem field.
func (r *queryResolver) GetProblem(ctx context.Context, id string) (*model.Problem, error) {
	return connection.GetProblem(id), nil
}

// GetProblems is the resolver for the getProblems field.
func (r *queryResolver) GetProblems(ctx context.Context) ([]*model.Problem, error) {
	return connection.GetProblems(), nil
}

// GetTag is the resolver for the getTag field.
func (r *queryResolver) GetTag(ctx context.Context, id string) (*model.Tag, error) {
	return connection.GetTag(id), nil
}

// GetTags is the resolver for the getTags field.
func (r *queryResolver) GetTags(ctx context.Context) ([]*model.Tag, error) {
	return connection.GetTags(), nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
var connection = database.Connect()
