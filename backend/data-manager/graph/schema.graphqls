# GraphQL schema example
#
# https://gqlgen.com/getting-started/

enum Role {
  PROBLEMSETTER
  REVIEWER
  ADMIN
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum Status {
  WITHPROPOSER
  WITHREVIEWER
  WITHADMIN
  SUBMITTED
  APPROVED
  REJECTED
}






type User {
  _id : ID!
  employeeID : String!
  name : String!
  email : String!
  password : String
  adminAssignedPassword : String!
  changedAdminAssignedPassword : Boolean!
  role : Role!
  createdAt : String!
  updatedAt : String
}

input UserCreateInput {
  employeeID : String!
  name : String!
  email : String!
  password : String
  adminAssignedPassword : String!
  changedAdminAssignedPassword : Boolean!
  role : Role!
}

input UserUpdateInput {
  employeeID : String
  name : String
  email : String
  password : String
  adminAssignedPassword : String
  changedAdminAssignedPassword : Boolean
  role : Role
}

type UserCreateResponse {
  id : ID!
  employeeID : String!
  name : String!
  email : String!
  password : String
  adminAssignedPassword : String
  changedAdminAssignedPassword : Boolean
  role : Role!
  createdAt : String!
  updatedAt : String
}

type UserUpdateResponse {
  id : ID!
  employeeID : String!
  name : String!
  email : String!
  password : String
  adminAssignedPassword : String
  changedAdminAssignedPassword : Boolean
  role : Role!
  createdAt : String!
  updatedAt : String
}

type UserDeleteResponse {
  id : String!
}







type Comment {
  body : String!
  userID : ID!
  userName : String!
  createdAt : String!
}

type ProblemCategory {
  _id : ID!
  name: String!
  subCategories: [String!]
}

input ProblemCategoryCreateInput {
  name : String!
  subCategories : [String!]
}

input ProblemCategoryUpdateInput {
  name : String
  subCategories : [String!]
}

type ProblemCategoryUpdateResponse {
  id : ID!
  name : String!
  subCategories : [String!]
}

type ProblemCategoryDeleteResponse {
  id : String!
}







scalar Upload

type Problem {
  _id : ID!
  statement : String!
  image : Upload
  tags : [String!]!
  difficulty : Difficulty!
  status : Status!
  authorUserID : String!
  reviewerUserID : String
  approverAdminUserID : String
  comments : [Comment!]
  createdAt : String!
  updatedAt : String
}


input ProblemCreateInput {
  statement : String!
  image : Upload
  tags : [String!]!
  difficulty : Difficulty!
  status : Status!
  authorUserID : String!
  reviewerUserID : String
  approverAdminUserID : String
  reviewerComment : String
  adminComment : String
  createdAt : String!
  updatedAt : String
}

input ProblemUpdateInput {
  statement : String
  image : Upload
  tags : [String]
  difficulty : Difficulty
  status : Status
  authorEmployeeID : String
  reviewerEmployeeID : String
  adminEmployeeID : String
  reviewerComment : String
  adminComment : String
}

type ProblemUpdateResponse {
  id : ID!
  statement : String!
  image : Upload
  tags : [String!]!
  difficulty : Difficulty!
  status : Status!
  authorEmployeeID : String!
  reviewerEmployeeID : String
  adminEmployeeID : String
  reviewerComment : String
  adminComment : String
  createdAt : String!
  updatedAt : String
}

type ProblemDeleteResponse {
  id : String!
}











type Query {
  getUser(id : ID!) : User!
  getUsers : [User!]!

  getProblemCategory(id : ID!) : ProblemCategory!
  getProblemCategories : [ProblemCategory!]!
}

type Mutation {
  createUser(input : UserCreateInput!) : UserCreateResponse!

  updateUser(id : ID!, input : UserUpdateInput!) : UserUpdateResponse!

  deleteUser(id : ID!) : UserDeleteResponse!



  createProblemCategory(input : ProblemCategoryCreateInput!) : ProblemCategory!

  updateProblemCategory(id : ID!, input : ProblemCategoryUpdateInput!) : ProblemCategoryUpdateResponse!
  
  deleteProblemCategory(id : ID!) : ProblemCategoryDeleteResponse!



  createProblem(input : ProblemCreateInput!) : Problem!

  updateProblem(id : ID!, input : ProblemUpdateInput!) : ProblemUpdateResponse!
  
  deleteProblem(id : ID!) : ProblemDeleteResponse!
}
